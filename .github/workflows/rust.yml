name: Rust

on:
  push:
    branches:
      - main
    tags:
      - "**"
  pull_request:
    branches:
      - "**"

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - uses: cargo-bins/cargo-binstall@main

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Rustfmt
        run: cargo fmt --all -- --files-with-diff --check

      - name: Clippy
        run: cargo clippy --workspace --all-targets --all-features

      - name: Audit
        run: cargo audit --ignore RUSTSEC-2023-0071

      - name: Install cargo-machete
        run: cargo binstall cargo-machete

      - name: Unused dependencies
        run: cargo machete

      - name: Display sccache stats
        run: sccache --show-stats

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    steps:
      # The test files are read verbatim, making it problematic if git is
      # allowed to insert \r when checking out files.
      - name: Disable git autocrlf
        run: git config --global core.autocrlf false

      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: cargo-bins/cargo-binstall@main

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Prepare for coverage
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo binstall grcov
          echo "RUSTFLAGS=-Cinstrument-coverage" >> "$GITHUB_ENV"
          echo "LLVM_PROFILE_FILE=$(pwd)/target/chia_rs-%p-%m.profraw" >> "$GITHUB_ENV"
          echo "CARGO_TARGET_DIR=$(pwd)/target" >> "$GITHUB_ENV"

      - name: Run tests
        run: cargo test --workspace --all-features --release

      - name: Continue with coverage
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install lcov -y
          rustup component add llvm-tools-preview
          grcov . --binary-path target -s . --branch --ignore-not-existing --ignore='*/.cargo/*' --ignore='tests/*' --ignore='venv/*' -o rust_cov.info
          python -c 'with open("rust_cov.info") as f: lines = [l for l in f if not (l.startswith("DA:") and int(l.split(",")[1].strip()) >= 2**63)]; open("lcov.info", "w").writelines(lines)'

      - name: Upload to Coveralls
        uses: coverallsapp/github-action@v2
        if: matrix.os == 'ubuntu-latest'
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        with:
          path-to-lcov: "./lcov.info"

      - name: Display sccache stats
        run: sccache --show-stats

  publish:
    name: Publish
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: cargo-bins/cargo-binstall@main

      - name: Build
        run: cargo build --release

      - name: Upload crate artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crate
          path: ./target/package/*-*.crate

      - name: Install wasm-pack
        run: cargo binstall wasm-pack

      - name: Build and pack wasm
        run: |
          cd wasm
          wasm-pack build
          wasm-pack pack

      - name: Upload NPM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: npm-pkg
          path: ./wasm/pkg/*-*.tgz

      - name: Install cargo-workspaces
        run: cargo binstall cargo-workspaces

      - name: Publish to crates.io if tagged
        if: startsWith(github.event.ref, 'refs/tags')
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.cargo_registry_token }}
        run: cargo ws publish --publish-as-is

      - name: Publish to npmjs.com if tagged
        if: startsWith(github.event.ref, 'refs/tags')
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.node_auth_token }}
          package: wasm/pkg/package.json

  benchmark:
    name: Benchmark
    runs-on: benchmark
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Run benchmarks
        run: cargo bench --workspace --exclude chia_rs

      - name: Display sccache stats
        run: sccache --show-stats

  fuzz:
    name: Fuzz
    runs-on: ubuntu-latest
    env:
      CARGO_PROFILE_RELEASE_LTO: false
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@nightly

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Install cargo-fuzz
        run: cargo +nightly install cargo-fuzz

      - name: Fuzz chia-consensus
        run: |
          cd crates/chia-consensus
          cargo fuzz list | xargs -I "%" sh -c "cargo +nightly fuzz run % -- -max_total_time=20 || exit 255"

      - name: Fuzz chia-bls
        env:
          # We disable leak reports here because blspy appears to be allocating
          # memory that's not freed. It might be a false positive since python is
          # not unloaded before exiting.
          LSAN_OPTIONS: detect_leaks=0
        run: |
          cd crates/chia-bls
          python -m pip install blspy
          cargo fuzz list | xargs -I "%" sh -c "cargo +nightly fuzz run % -- -max_total_time=10 || exit 255"

      - name: Fuzz clvm-utils
        run: |
          cd crates/clvm-utils
          cargo fuzz list | xargs -I "%" sh -c "cargo +nightly fuzz run % -- -max_total_time=20 || exit 255"

      - name: Fuzz chia-protocol
        run: |
          cd crates/chia-protocol
          cargo +nightly fuzz build
          cargo fuzz list | xargs -I "%" sh -c "cargo +nightly fuzz run % -- -max_total_time=20 || exit 255"

      - name: Fuzz chia-puzzles
        run: |
          cd crates/chia-puzzles
          cargo +nightly fuzz build
          cargo fuzz list | xargs -I "%" sh -c "cargo +nightly fuzz run % -- -max_total_time=20 || exit 255"

      - name: Display sccache stats
        run: sccache --show-stats
