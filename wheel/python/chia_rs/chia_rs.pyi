from .sized_bytes import bytes32, bytes100
from .sized_ints import uint64, uint32, uint8, uint128, uint16
from typing import Any, Union, Tuple, Optional, ClassVar, List, Object
from chia.types.blockchain_format.program import Program as ChiaProgram


class Coin:
    parent_coin_info: bytes32
    puzzle_hash: bytes32
    amount: uint64
    def __init__(
        self,
        parent_coin_info: bytes32,
        puzzle_hash: bytes32,
        amount: uint64,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> Coin: ...
    def __copy__(self) -> Coin: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> Coin: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> Coin: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[Coin, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> Coin: ...

ReadableBuffer = Union[bytes, bytearray, memoryview]

class PoolTarget:
    puzzle_hash: bytes32
    max_height: uint32
    def __init__(self, puzzle_hash: bytes32, max_height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> PoolTarget: ...
    def __copy__(self) -> PoolTarget: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> PoolTarget: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> PoolTarget: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[PoolTarget, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> PoolTarget: ...

class ClassgroupElement:
    data: bytes100
    def __init__(self, data: bytes100) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> ClassgroupElement: ...
    def __copy__(self) -> ClassgroupElement: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> ClassgroupElement: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> ClassgroupElement: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[ClassgroupElement, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> ClassgroupElement: ...

class EndOfSubSlotBundle:
    challenge_chain: ChallengeChainSubSlot
    infused_challenge_chain: Optional[InfusedChallengeChainSubSlot]
    reward_chain: RewardChainSubSlot
    proofs: SubSlotProofs
    def __init__(
        self,
        challenge_chain: ChallengeChainSubSlot,
        infused_challenge_chain: Optional[InfusedChallengeChainSubSlot],
        reward_chain: RewardChainSubSlot,
        proofs: SubSlotProofs,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> EndOfSubSlotBundle: ...
    def __copy__(self) -> EndOfSubSlotBundle: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> EndOfSubSlotBundle: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> EndOfSubSlotBundle: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[EndOfSubSlotBundle, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> EndOfSubSlotBundle: ...

class ChallengeChainSubSlot:
    challenge_chain_end_of_slot_vdf: VDFInfo
    infused_challenge_chain_sub_slot_hash: Optional[bytes32]
    subepoch_summary_hash: Optional[bytes32]
    new_sub_slot_iters: Optional[uint64]
    new_difficulty: Optional[uint64]
    def __init__(
        self,
        challenge_chain_end_of_slot_vdf: VDFInfo,
        infused_challenge_chain_sub_slot_hash: Optional[bytes32],
        subepoch_summary_hash: Optional[bytes32],
        new_sub_slot_iters: Optional[uint64],
        new_difficulty: Optional[uint64],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> ChallengeChainSubSlot: ...
    def __copy__(self) -> ChallengeChainSubSlot: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> ChallengeChainSubSlot: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> ChallengeChainSubSlot: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[ChallengeChainSubSlot, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> ChallengeChainSubSlot: ...

class VDFInfo:
    challenge: bytes32
    number_of_iterations: uint64
    output: ClassgroupElement
    def __init__(
        self,
        challenge: bytes32,
        number_of_iterations: uint64,
        output: ClassgroupElement,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> VDFInfo: ...
    def __copy__(self) -> VDFInfo: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> VDFInfo: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> VDFInfo: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[VDFInfo, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> VDFInfo: ...

class InfusedChallengeChainSubSlot:
    infused_challenge_chain_end_of_slot_vdf: VDFInfo
    def __init__(self, infused_challenge_chain_end_of_slot_vdf: VDFInfo) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> InfusedChallengeChainSubSlot: ...
    def __copy__(self) -> InfusedChallengeChainSubSlot: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> InfusedChallengeChainSubSlot: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> InfusedChallengeChainSubSlot: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[InfusedChallengeChainSubSlot, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> InfusedChallengeChainSubSlot: ...

class RewardChainSubSlot:
    end_of_slot_vdf: VDFInfo
    challenge_chain_sub_slot_hash: bytes32
    infused_challenge_chain_sub_slot_hash: Optional[bytes32]
    deficit: uint8
    def __init__(
        self,
        end_of_slot_vdf: VDFInfo,
        challenge_chain_sub_slot_hash: bytes32,
        infused_challenge_chain_sub_slot_hash: Optional[bytes32],
        deficit: uint8,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RewardChainSubSlot: ...
    def __copy__(self) -> RewardChainSubSlot: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RewardChainSubSlot: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RewardChainSubSlot: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RewardChainSubSlot, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RewardChainSubSlot: ...

class SubSlotProofs:
    challenge_chain_slot_proof: VDFProof
    infused_challenge_chain_slot_proof: Optional[VDFProof]
    reward_chain_slot_proof: VDFProof
    def __init__(
        self,
        challenge_chain_slot_proof: VDFProof,
        infused_challenge_chain_slot_proof: Optional[VDFProof],
        reward_chain_slot_proof: VDFProof,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> SubSlotProofs: ...
    def __copy__(self) -> SubSlotProofs: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> SubSlotProofs: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> SubSlotProofs: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[SubSlotProofs, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> SubSlotProofs: ...

class VDFProof:
    witness_type: uint8
    witness: bytes
    normalized_to_identity: bool
    def __init__(
        self,
        witness_type: uint8,
        witness: bytes,
        normalized_to_identity: bool,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> VDFProof: ...
    def __copy__(self) -> VDFProof: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> VDFProof: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> VDFProof: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[VDFProof, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> VDFProof: ...

class TransactionsInfo:
    generator_root: bytes32
    generator_refs_root: bytes32
    aggregated_signature: G2Element
    fees: uint64
    cost: uint64
    reward_claims_incorporated: List[Coin]
    def __init__(
        self,
        generator_root: bytes32,
        generator_refs_root: bytes32,
        aggregated_signature: G2Element,
        fees: uint64,
        cost: uint64,
        reward_claims_incorporated: List[Coin],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> TransactionsInfo: ...
    def __copy__(self) -> TransactionsInfo: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> TransactionsInfo: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> TransactionsInfo: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[TransactionsInfo, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> TransactionsInfo: ...

class G2Element:
    SIZE: ClassVar[int] = ...
    def __new__(cls) -> G2Element: ...
    def pair(self, public_key: G1Element) -> GTElement: ...
    @staticmethod
    def generator() -> G2Element: ...
    def __str__(self) -> str: ...
    def __add__(self, rhs: G2Element) -> G2Element: ...
    def __iadd__(self, rhs: G2Element) -> G2Element: ...
    def __init__(self) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> G2Element: ...
    def __copy__(self) -> G2Element: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> G2Element: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> G2Element: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[G2Element, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> G2Element: ...

class G1Element:
    SIZE: ClassVar[int] = ...
    def __new__(cls) -> G1Element: ...
    def get_fingerprint(self) -> int: ...
    def pair(self, signature: G2Element) -> GTElement: ...
    @staticmethod
    def generator() -> G1Element: ...
    def __str__(self) -> str: ...
    def __add__(self, rhs: G1Element) -> G1Element: ...
    def __iadd__(self, rhs: G1Element) -> G1Element: ...
    def __init__(self) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> G1Element: ...
    def __copy__(self) -> G1Element: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> G1Element: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> G1Element: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[G1Element, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> G1Element: ...

class GTElement:
    SIZE: ClassVar[int] = ...
    def __str__(self) -> str: ...
    def __mul__(self, rhs: GTElement) -> GTElement: ...
    def __imul__(self, rhs: GTElement) -> GTElement: ...
    def __init__(self) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> GTElement: ...
    def __copy__(self) -> GTElement: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> GTElement: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> GTElement: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[GTElement, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> GTElement: ...

class FoliageTransactionBlock:
    prev_transaction_block_hash: bytes32
    timestamp: uint64
    filter_hash: bytes32
    additions_root: bytes32
    removals_root: bytes32
    transactions_info_hash: bytes32
    def __init__(
        self,
        prev_transaction_block_hash: bytes32,
        timestamp: uint64,
        filter_hash: bytes32,
        additions_root: bytes32,
        removals_root: bytes32,
        transactions_info_hash: bytes32,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> FoliageTransactionBlock: ...
    def __copy__(self) -> FoliageTransactionBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> FoliageTransactionBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> FoliageTransactionBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[FoliageTransactionBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> FoliageTransactionBlock: ...

class FoliageBlockData:
    unfinished_reward_block_hash: bytes32
    pool_target: PoolTarget
    pool_signature: Optional[G2Element]
    farmer_reward_puzzle_hash: bytes32
    extension_data: bytes32
    def __init__(
        self,
        unfinished_reward_block_hash: bytes32,
        pool_target: PoolTarget,
        pool_signature: Optional[G2Element],
        farmer_reward_puzzle_hash: bytes32,
        extension_data: bytes32,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> FoliageBlockData: ...
    def __copy__(self) -> FoliageBlockData: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> FoliageBlockData: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> FoliageBlockData: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[FoliageBlockData, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> FoliageBlockData: ...

class Foliage:
    prev_block_hash: bytes32
    reward_block_hash: bytes32
    foliage_block_data: FoliageBlockData
    foliage_block_data_signature: G2Element
    foliage_transaction_block_hash: Optional[bytes32]
    foliage_transaction_block_signature: Optional[G2Element]
    def __init__(
        self,
        prev_block_hash: bytes32,
        reward_block_hash: bytes32,
        foliage_block_data: FoliageBlockData,
        foliage_block_data_signature: G2Element,
        foliage_transaction_block_hash: Optional[bytes32],
        foliage_transaction_block_signature: Optional[G2Element],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> Foliage: ...
    def __copy__(self) -> Foliage: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> Foliage: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> Foliage: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[Foliage, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> Foliage: ...

class ProofOfSpace:
    challenge: bytes32
    pool_public_key: Optional[G1Element]
    pool_contract_puzzle_hash: Optional[bytes32]
    plot_public_key: G1Element
    size: uint8
    proof: bytes
    def __init__(
        self,
        challenge: bytes32,
        pool_public_key: Optional[G1Element],
        pool_contract_puzzle_hash: Optional[bytes32],
        plot_public_key: G1Element,
        size: uint8,
        proof: bytes,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> ProofOfSpace: ...
    def __copy__(self) -> ProofOfSpace: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> ProofOfSpace: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> ProofOfSpace: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[ProofOfSpace, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> ProofOfSpace: ...

class RewardChainBlockUnfinished:
    total_iters: uint128
    signage_point_index: uint8
    pos_ss_cc_challenge_hash: bytes32
    proof_of_space: ProofOfSpace
    challenge_chain_sp_vdf: Optional[VDFInfo]
    challenge_chain_sp_signature: G2Element
    reward_chain_sp_vdf: Optional[VDFInfo]
    reward_chain_sp_signature: G2Element
    def __init__(
        self,
        total_iters: uint128,
        signage_point_index: uint8,
        pos_ss_cc_challenge_hash: bytes32,
        proof_of_space: ProofOfSpace,
        challenge_chain_sp_vdf: Optional[VDFInfo],
        challenge_chain_sp_signature: G2Element,
        reward_chain_sp_vdf: Optional[VDFInfo],
        reward_chain_sp_signature: G2Element,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RewardChainBlockUnfinished: ...
    def __copy__(self) -> RewardChainBlockUnfinished: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RewardChainBlockUnfinished: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RewardChainBlockUnfinished: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RewardChainBlockUnfinished, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RewardChainBlockUnfinished: ...

class RewardChainBlock:
    weight: uint128
    height: uint32
    total_iters: uint128
    signage_point_index: uint8
    pos_ss_cc_challenge_hash: bytes32
    proof_of_space: ProofOfSpace
    challenge_chain_sp_vdf: Optional[VDFInfo]
    challenge_chain_sp_signature: G2Element
    challenge_chain_ip_vdf: VDFInfo
    reward_chain_sp_vdf: Optional[VDFInfo]
    reward_chain_sp_signature: G2Element
    reward_chain_ip_vdf: VDFInfo
    infused_challenge_chain_ip_vdf: Optional[VDFInfo]
    is_transaction_block: bool
    def __init__(
        self,
        weight: uint128,
        height: uint32,
        total_iters: uint128,
        signage_point_index: uint8,
        pos_ss_cc_challenge_hash: bytes32,
        proof_of_space: ProofOfSpace,
        challenge_chain_sp_vdf: Optional[VDFInfo],
        challenge_chain_sp_signature: G2Element,
        challenge_chain_ip_vdf: VDFInfo,
        reward_chain_sp_vdf: Optional[VDFInfo],
        reward_chain_sp_signature: G2Element,
        reward_chain_ip_vdf: VDFInfo,
        infused_challenge_chain_ip_vdf: Optional[VDFInfo],
        is_transaction_block: bool,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RewardChainBlock: ...
    def __copy__(self) -> RewardChainBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RewardChainBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RewardChainBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RewardChainBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RewardChainBlock: ...

class ChallengeBlockInfo:
    proof_of_space: ProofOfSpace
    challenge_chain_sp_vdf: Optional[VDFInfo]
    challenge_chain_sp_signature: G2Element
    challenge_chain_ip_vdf: VDFInfo
    def __init__(
        self,
        proof_of_space: ProofOfSpace,
        challenge_chain_sp_vdf: Optional[VDFInfo],
        challenge_chain_sp_signature: G2Element,
        challenge_chain_ip_vdf: VDFInfo,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> ChallengeBlockInfo: ...
    def __copy__(self) -> ChallengeBlockInfo: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> ChallengeBlockInfo: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> ChallengeBlockInfo: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[ChallengeBlockInfo, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> ChallengeBlockInfo: ...

class SpendBundle:
    coin_spends: List[CoinSpend]
    aggregated_signature: G2Element
    def __init__(self, coin_spends: List[CoinSpend], aggregated_signature: G2Element) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> SpendBundle: ...
    def __copy__(self) -> SpendBundle: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> SpendBundle: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> SpendBundle: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[SpendBundle, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> SpendBundle: ...

class CoinSpend:
    coin: Coin
    puzzle_reveal: Program
    solution: Program
    def __init__(
        self,
        coin: Coin,
        puzzle_reveal: Program,
        solution: Program,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> CoinSpend: ...
    def __copy__(self) -> CoinSpend: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> CoinSpend: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> CoinSpend: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[CoinSpend, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> CoinSpend: ...

class Program:
    def get_tree_hash(self) -> bytes32: ...
    @staticmethod
    def default() -> Program: ...
    @staticmethod
    def fromhex(hex: str) -> Program: ...
    def run_mempool_with_cost(self, max_cost: int, args: Object) -> Tuple[int, ChiaProgram]: ...
    def run_with_cost(self, max_cost: int, args: Object) -> Tuple[int, ChiaProgram]: ...
    def _run(
        self,
        max_cost: int,
        flags: int,
        args: Object,
    ) -> Tuple[int, ChiaProgram]: ...
    @staticmethod
    def to(value: Object) -> Program: ...
    @staticmethod
    def from_program(program: ChiaProgram) -> Program: ...
    def to_program(self) -> ChiaProgram: ...
    def uncurry(self) -> Tuple[ChiaProgram, ChiaProgram]: ...
    def __init__(self) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> Program: ...
    def __copy__(self) -> Program: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> Program: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> Program: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[Program, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> Program: ...

class SubSlotData:
    proof_of_space: Optional[ProofOfSpace]
    cc_signage_point: Optional[VDFProof]
    cc_infusion_point: Optional[VDFProof]
    icc_infusion_point: Optional[VDFProof]
    cc_sp_vdf_info: Optional[VDFInfo]
    signage_point_index: Optional[uint8]
    cc_slot_end: Optional[VDFProof]
    icc_slot_end: Optional[VDFProof]
    cc_slot_end_info: Optional[VDFInfo]
    icc_slot_end_info: Optional[VDFInfo]
    cc_ip_vdf_info: Optional[VDFInfo]
    icc_ip_vdf_info: Optional[VDFInfo]
    total_iters: Optional[uint128]
    def __init__(
        self,
        proof_of_space: Optional[ProofOfSpace],
        cc_signage_point: Optional[VDFProof],
        cc_infusion_point: Optional[VDFProof],
        icc_infusion_point: Optional[VDFProof],
        cc_sp_vdf_info: Optional[VDFInfo],
        signage_point_index: Optional[uint8],
        cc_slot_end: Optional[VDFProof],
        icc_slot_end: Optional[VDFProof],
        cc_slot_end_info: Optional[VDFInfo],
        icc_slot_end_info: Optional[VDFInfo],
        cc_ip_vdf_info: Optional[VDFInfo],
        icc_ip_vdf_info: Optional[VDFInfo],
        total_iters: Optional[uint128],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> SubSlotData: ...
    def __copy__(self) -> SubSlotData: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> SubSlotData: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> SubSlotData: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[SubSlotData, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> SubSlotData: ...

class SubEpochData:
    reward_chain_hash: bytes32
    num_blocks_overflow: uint8
    new_sub_slot_iters: Optional[uint64]
    new_difficulty: Optional[uint64]
    def __init__(
        self,
        reward_chain_hash: bytes32,
        num_blocks_overflow: uint8,
        new_sub_slot_iters: Optional[uint64],
        new_difficulty: Optional[uint64],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> SubEpochData: ...
    def __copy__(self) -> SubEpochData: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> SubEpochData: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> SubEpochData: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[SubEpochData, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> SubEpochData: ...

class SubEpochChallengeSegment:
    sub_epoch_n: uint32
    sub_slots: List[SubSlotData]
    rc_slot_end_info: Optional[VDFInfo]
    def __init__(
        self,
        sub_epoch_n: uint32,
        sub_slots: List[SubSlotData],
        rc_slot_end_info: Optional[VDFInfo],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> SubEpochChallengeSegment: ...
    def __copy__(self) -> SubEpochChallengeSegment: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> SubEpochChallengeSegment: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> SubEpochChallengeSegment: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[SubEpochChallengeSegment, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> SubEpochChallengeSegment: ...

class SubEpochSegments:
    challenge_segments: List[SubEpochChallengeSegment]
    def __init__(self, challenge_segments: List[SubEpochChallengeSegment]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> SubEpochSegments: ...
    def __copy__(self) -> SubEpochSegments: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> SubEpochSegments: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> SubEpochSegments: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[SubEpochSegments, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> SubEpochSegments: ...

class SubEpochSummary:
    prev_subepoch_summary_hash: bytes32
    reward_chain_hash: bytes32
    num_blocks_overflow: uint8
    new_difficulty: Optional[uint64]
    new_sub_slot_iters: Optional[uint64]
    def __init__(
        self,
        prev_subepoch_summary_hash: bytes32,
        reward_chain_hash: bytes32,
        num_blocks_overflow: uint8,
        new_difficulty: Optional[uint64],
        new_sub_slot_iters: Optional[uint64],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> SubEpochSummary: ...
    def __copy__(self) -> SubEpochSummary: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> SubEpochSummary: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> SubEpochSummary: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[SubEpochSummary, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> SubEpochSummary: ...

class UnfinishedBlock:
    finished_sub_slots: List[EndOfSubSlotBundle]
    reward_chain_block: RewardChainBlockUnfinished
    challenge_chain_sp_proof: Optional[VDFProof]
    reward_chain_sp_proof: Optional[VDFProof]
    foliage: Foliage
    foliage_transaction_block: Optional[FoliageTransactionBlock]
    transactions_info: Optional[TransactionsInfo]
    transactions_generator: Optional[Program]
    transactions_generator_ref_list: List[uint32]
    def __init__(
        self,
        finished_sub_slots: List[EndOfSubSlotBundle],
        reward_chain_block: RewardChainBlockUnfinished,
        challenge_chain_sp_proof: Optional[VDFProof],
        reward_chain_sp_proof: Optional[VDFProof],
        foliage: Foliage,
        foliage_transaction_block: Optional[FoliageTransactionBlock],
        transactions_info: Optional[TransactionsInfo],
        transactions_generator: Optional[Program],
        transactions_generator_ref_list: List[uint32],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> UnfinishedBlock: ...
    def __copy__(self) -> UnfinishedBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> UnfinishedBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> UnfinishedBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[UnfinishedBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> UnfinishedBlock: ...

class FullBlock:
    finished_sub_slots: List[EndOfSubSlotBundle]
    reward_chain_block: RewardChainBlock
    challenge_chain_sp_proof: Optional[VDFProof]
    challenge_chain_ip_proof: VDFProof
    reward_chain_sp_proof: Optional[VDFProof]
    reward_chain_ip_proof: VDFProof
    infused_challenge_chain_ip_proof: Optional[VDFProof]
    foliage: Foliage
    foliage_transaction_block: Optional[FoliageTransactionBlock]
    transactions_info: Optional[TransactionsInfo]
    transactions_generator: Optional[Program]
    transactions_generator_ref_list: List[uint32]
    def __init__(
        self,
        finished_sub_slots: List[EndOfSubSlotBundle],
        reward_chain_block: RewardChainBlock,
        challenge_chain_sp_proof: Optional[VDFProof],
        challenge_chain_ip_proof: VDFProof,
        reward_chain_sp_proof: Optional[VDFProof],
        reward_chain_ip_proof: VDFProof,
        infused_challenge_chain_ip_proof: Optional[VDFProof],
        foliage: Foliage,
        foliage_transaction_block: Optional[FoliageTransactionBlock],
        transactions_info: Optional[TransactionsInfo],
        transactions_generator: Optional[Program],
        transactions_generator_ref_list: List[uint32],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> FullBlock: ...
    def __copy__(self) -> FullBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> FullBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> FullBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[FullBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> FullBlock: ...

class BlockRecord:
    header_hash: bytes32
    prev_hash: bytes32
    height: uint32
    weight: uint128
    total_iters: uint128
    signage_point_index: uint8
    challenge_vdf_output: ClassgroupElement
    infused_challenge_vdf_output: Optional[ClassgroupElement]
    reward_infusion_new_challenge: bytes32
    challenge_block_info_hash: bytes32
    sub_slot_iters: uint64
    pool_puzzle_hash: bytes32
    farmer_puzzle_hash: bytes32
    required_iters: uint64
    deficit: uint8
    overflow: bool
    prev_transaction_block_height: uint32
    timestamp: Optional[uint64]
    prev_transaction_block_hash: Optional[bytes32]
    fees: Optional[uint64]
    reward_claims_incorporated: Optional[List[Coin]]
    finished_challenge_slot_hashes: Optional[List[bytes32]]
    finished_infused_challenge_slot_hashes: Optional[List[bytes32]]
    finished_reward_slot_hashes: Optional[List[bytes32]]
    sub_epoch_summary_included: Optional[SubEpochSummary]
    def __init__(
        self,
        header_hash: bytes32,
        prev_hash: bytes32,
        height: uint32,
        weight: uint128,
        total_iters: uint128,
        signage_point_index: uint8,
        challenge_vdf_output: ClassgroupElement,
        infused_challenge_vdf_output: Optional[ClassgroupElement],
        reward_infusion_new_challenge: bytes32,
        challenge_block_info_hash: bytes32,
        sub_slot_iters: uint64,
        pool_puzzle_hash: bytes32,
        farmer_puzzle_hash: bytes32,
        required_iters: uint64,
        deficit: uint8,
        overflow: bool,
        prev_transaction_block_height: uint32,
        timestamp: Optional[uint64],
        prev_transaction_block_hash: Optional[bytes32],
        fees: Optional[uint64],
        reward_claims_incorporated: Optional[List[Coin]],
        finished_challenge_slot_hashes: Optional[List[bytes32]],
        finished_infused_challenge_slot_hashes: Optional[List[bytes32]],
        finished_reward_slot_hashes: Optional[List[bytes32]],
        sub_epoch_summary_included: Optional[SubEpochSummary],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> BlockRecord: ...
    def __copy__(self) -> BlockRecord: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> BlockRecord: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> BlockRecord: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[BlockRecord, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> BlockRecord: ...

class WeightProof:
    sub_epochs: List[SubEpochData]
    sub_epoch_segments: List[SubEpochChallengeSegment]
    recent_chain_data: List[HeaderBlock]
    def __init__(
        self,
        sub_epochs: List[SubEpochData],
        sub_epoch_segments: List[SubEpochChallengeSegment],
        recent_chain_data: List[HeaderBlock],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> WeightProof: ...
    def __copy__(self) -> WeightProof: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> WeightProof: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> WeightProof: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[WeightProof, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> WeightProof: ...

class HeaderBlock:
    finished_sub_slots: List[EndOfSubSlotBundle]
    reward_chain_block: RewardChainBlock
    challenge_chain_sp_proof: Optional[VDFProof]
    challenge_chain_ip_proof: VDFProof
    reward_chain_sp_proof: Optional[VDFProof]
    reward_chain_ip_proof: VDFProof
    infused_challenge_chain_ip_proof: Optional[VDFProof]
    foliage: Foliage
    foliage_transaction_block: Optional[FoliageTransactionBlock]
    transactions_filter: bytes
    transactions_info: Optional[TransactionsInfo]
    def __init__(
        self,
        finished_sub_slots: List[EndOfSubSlotBundle],
        reward_chain_block: RewardChainBlock,
        challenge_chain_sp_proof: Optional[VDFProof],
        challenge_chain_ip_proof: VDFProof,
        reward_chain_sp_proof: Optional[VDFProof],
        reward_chain_ip_proof: VDFProof,
        infused_challenge_chain_ip_proof: Optional[VDFProof],
        foliage: Foliage,
        foliage_transaction_block: Optional[FoliageTransactionBlock],
        transactions_filter: bytes,
        transactions_info: Optional[TransactionsInfo],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> HeaderBlock: ...
    def __copy__(self) -> HeaderBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> HeaderBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> HeaderBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[HeaderBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> HeaderBlock: ...

class RecentChainData:
    recent_chain_data: List[HeaderBlock]
    def __init__(self, recent_chain_data: List[HeaderBlock]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RecentChainData: ...
    def __copy__(self) -> RecentChainData: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RecentChainData: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RecentChainData: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RecentChainData, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RecentChainData: ...

class ProofBlockHeader:
    finished_sub_slots: List[EndOfSubSlotBundle]
    reward_chain_block: RewardChainBlock
    def __init__(self, finished_sub_slots: List[EndOfSubSlotBundle], reward_chain_block: RewardChainBlock) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> ProofBlockHeader: ...
    def __copy__(self) -> ProofBlockHeader: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> ProofBlockHeader: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> ProofBlockHeader: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[ProofBlockHeader, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> ProofBlockHeader: ...

class TimestampedPeerInfo:
    host: str
    port: uint16
    timestamp: uint64
    def __init__(
        self,
        host: str,
        port: uint16,
        timestamp: uint64,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> TimestampedPeerInfo: ...
    def __copy__(self) -> TimestampedPeerInfo: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> TimestampedPeerInfo: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> TimestampedPeerInfo: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[TimestampedPeerInfo, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> TimestampedPeerInfo: ...

class RequestPuzzleSolution:
    coin_name: bytes32
    height: uint32
    def __init__(self, coin_name: bytes32, height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestPuzzleSolution: ...
    def __copy__(self) -> RequestPuzzleSolution: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestPuzzleSolution: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestPuzzleSolution: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestPuzzleSolution, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestPuzzleSolution: ...

class PuzzleSolutionResponse:
    coin_name: bytes32
    height: uint32
    puzzle: Program
    solution: Program
    def __init__(
        self,
        coin_name: bytes32,
        height: uint32,
        puzzle: Program,
        solution: Program,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> PuzzleSolutionResponse: ...
    def __copy__(self) -> PuzzleSolutionResponse: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> PuzzleSolutionResponse: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> PuzzleSolutionResponse: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[PuzzleSolutionResponse, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> PuzzleSolutionResponse: ...

class RespondPuzzleSolution:
    response: PuzzleSolutionResponse
    def __init__(self, response: PuzzleSolutionResponse) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondPuzzleSolution: ...
    def __copy__(self) -> RespondPuzzleSolution: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondPuzzleSolution: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondPuzzleSolution: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondPuzzleSolution, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondPuzzleSolution: ...

class RejectPuzzleSolution:
    coin_name: bytes32
    height: uint32
    def __init__(self, coin_name: bytes32, height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RejectPuzzleSolution: ...
    def __copy__(self) -> RejectPuzzleSolution: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RejectPuzzleSolution: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RejectPuzzleSolution: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RejectPuzzleSolution, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RejectPuzzleSolution: ...

class SendTransaction:
    transaction: SpendBundle
    def __init__(self, transaction: SpendBundle) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> SendTransaction: ...
    def __copy__(self) -> SendTransaction: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> SendTransaction: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> SendTransaction: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[SendTransaction, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> SendTransaction: ...

class TransactionAck:
    txid: bytes32
    status: uint8
    error: Optional[str]
    def __init__(
        self,
        txid: bytes32,
        status: uint8,
        error: Optional[str],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> TransactionAck: ...
    def __copy__(self) -> TransactionAck: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> TransactionAck: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> TransactionAck: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[TransactionAck, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> TransactionAck: ...

class NewPeakWallet:
    header_hash: bytes32
    height: uint32
    weight: uint128
    fork_point_with_previous_peak: uint32
    def __init__(
        self,
        header_hash: bytes32,
        height: uint32,
        weight: uint128,
        fork_point_with_previous_peak: uint32,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> NewPeakWallet: ...
    def __copy__(self) -> NewPeakWallet: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> NewPeakWallet: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> NewPeakWallet: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[NewPeakWallet, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> NewPeakWallet: ...

class RequestBlockHeader:
    height: uint32
    def __init__(self, height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestBlockHeader: ...
    def __copy__(self) -> RequestBlockHeader: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestBlockHeader: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestBlockHeader: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestBlockHeader, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestBlockHeader: ...

class RespondBlockHeader:
    header_block: HeaderBlock
    def __init__(self, header_block: HeaderBlock) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondBlockHeader: ...
    def __copy__(self) -> RespondBlockHeader: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondBlockHeader: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondBlockHeader: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondBlockHeader, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondBlockHeader: ...

class RejectHeaderRequest:
    height: uint32
    def __init__(self, height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RejectHeaderRequest: ...
    def __copy__(self) -> RejectHeaderRequest: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RejectHeaderRequest: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RejectHeaderRequest: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RejectHeaderRequest, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RejectHeaderRequest: ...

class RequestRemovals:
    height: uint32
    header_hash: bytes32
    coin_names: Optional[List[bytes32]]
    def __init__(
        self,
        height: uint32,
        header_hash: bytes32,
        coin_names: Optional[List[bytes32]],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestRemovals: ...
    def __copy__(self) -> RequestRemovals: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestRemovals: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestRemovals: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestRemovals, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestRemovals: ...

class RespondRemovals:
    height: uint32
    header_hash: bytes32
    coins: List[Tuple[bytes32, Optional[Coin]]]
    proofs: Optional[List[Tuple[bytes32, bytes]]]
    def __init__(
        self,
        height: uint32,
        header_hash: bytes32,
        coins: List[Tuple[bytes32, Optional[Coin]]],
        proofs: Optional[List[Tuple[bytes32, bytes]]],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondRemovals: ...
    def __copy__(self) -> RespondRemovals: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondRemovals: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondRemovals: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondRemovals, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondRemovals: ...

class RejectRemovalsRequest:
    height: uint32
    header_hash: bytes32
    def __init__(self, height: uint32, header_hash: bytes32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RejectRemovalsRequest: ...
    def __copy__(self) -> RejectRemovalsRequest: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RejectRemovalsRequest: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RejectRemovalsRequest: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RejectRemovalsRequest, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RejectRemovalsRequest: ...

class RequestAdditions:
    height: uint32
    header_hash: Optional[bytes32]
    puzzle_hashes: Optional[List[bytes32]]
    def __init__(
        self,
        height: uint32,
        header_hash: Optional[bytes32],
        puzzle_hashes: Optional[List[bytes32]],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestAdditions: ...
    def __copy__(self) -> RequestAdditions: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestAdditions: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestAdditions: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestAdditions, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestAdditions: ...

class RespondAdditions:
    height: uint32
    header_hash: bytes32
    coins: List[Tuple[bytes32, List[Coin]]]
    proofs: Optional[List[Tuple[bytes32, bytes, Optional[bytes]]]]
    def __init__(
        self,
        height: uint32,
        header_hash: bytes32,
        coins: List[Tuple[bytes32, List[Coin]]],
        proofs: Optional[List[Tuple[bytes32, bytes, Optional[bytes]]]],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondAdditions: ...
    def __copy__(self) -> RespondAdditions: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondAdditions: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondAdditions: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondAdditions, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondAdditions: ...

class RejectAdditionsRequest:
    height: uint32
    header_hash: bytes32
    def __init__(self, height: uint32, header_hash: bytes32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RejectAdditionsRequest: ...
    def __copy__(self) -> RejectAdditionsRequest: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RejectAdditionsRequest: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RejectAdditionsRequest: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RejectAdditionsRequest, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RejectAdditionsRequest: ...

class RespondBlockHeaders:
    start_height: uint32
    end_height: uint32
    header_blocks: List[HeaderBlock]
    def __init__(
        self,
        start_height: uint32,
        end_height: uint32,
        header_blocks: List[HeaderBlock],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondBlockHeaders: ...
    def __copy__(self) -> RespondBlockHeaders: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondBlockHeaders: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondBlockHeaders: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondBlockHeaders, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondBlockHeaders: ...

class RejectBlockHeaders:
    start_height: uint32
    end_height: uint32
    def __init__(self, start_height: uint32, end_height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RejectBlockHeaders: ...
    def __copy__(self) -> RejectBlockHeaders: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RejectBlockHeaders: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RejectBlockHeaders: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RejectBlockHeaders, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RejectBlockHeaders: ...

class RequestBlockHeaders:
    start_height: uint32
    end_height: uint32
    return_filter: bool
    def __init__(
        self,
        start_height: uint32,
        end_height: uint32,
        return_filter: bool,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestBlockHeaders: ...
    def __copy__(self) -> RequestBlockHeaders: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestBlockHeaders: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestBlockHeaders: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestBlockHeaders, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestBlockHeaders: ...

class RequestHeaderBlocks:
    start_height: uint32
    end_height: uint32
    def __init__(self, start_height: uint32, end_height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestHeaderBlocks: ...
    def __copy__(self) -> RequestHeaderBlocks: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestHeaderBlocks: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestHeaderBlocks: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestHeaderBlocks, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestHeaderBlocks: ...

class RejectHeaderBlocks:
    start_height: uint32
    end_height: uint32
    def __init__(self, start_height: uint32, end_height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RejectHeaderBlocks: ...
    def __copy__(self) -> RejectHeaderBlocks: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RejectHeaderBlocks: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RejectHeaderBlocks: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RejectHeaderBlocks, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RejectHeaderBlocks: ...

class RespondHeaderBlocks:
    start_height: uint32
    end_height: uint32
    header_blocks: List[HeaderBlock]
    def __init__(
        self,
        start_height: uint32,
        end_height: uint32,
        header_blocks: List[HeaderBlock],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondHeaderBlocks: ...
    def __copy__(self) -> RespondHeaderBlocks: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondHeaderBlocks: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondHeaderBlocks: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondHeaderBlocks, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondHeaderBlocks: ...

class UnfinishedHeaderBlock:
    finished_sub_slots: List[EndOfSubSlotBundle]
    reward_chain_block: RewardChainBlockUnfinished
    challenge_chain_sp_proof: Optional[VDFProof]
    reward_chain_sp_proof: Optional[VDFProof]
    foliage: Foliage
    foliage_transaction_block: Optional[FoliageTransactionBlock]
    transactions_filter: bytes
    def __init__(
        self,
        finished_sub_slots: List[EndOfSubSlotBundle],
        reward_chain_block: RewardChainBlockUnfinished,
        challenge_chain_sp_proof: Optional[VDFProof],
        reward_chain_sp_proof: Optional[VDFProof],
        foliage: Foliage,
        foliage_transaction_block: Optional[FoliageTransactionBlock],
        transactions_filter: bytes,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> UnfinishedHeaderBlock: ...
    def __copy__(self) -> UnfinishedHeaderBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> UnfinishedHeaderBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> UnfinishedHeaderBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[UnfinishedHeaderBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> UnfinishedHeaderBlock: ...

class CoinState:
    coin: Coin
    spent_height: Optional[uint32]
    created_height: Optional[uint32]
    def __init__(
        self,
        coin: Coin,
        spent_height: Optional[uint32],
        created_height: Optional[uint32],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> CoinState: ...
    def __copy__(self) -> CoinState: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> CoinState: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> CoinState: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[CoinState, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> CoinState: ...

class RegisterForPhUpdates:
    puzzle_hashes: List[bytes32]
    min_height: uint32
    def __init__(self, puzzle_hashes: List[bytes32], min_height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RegisterForPhUpdates: ...
    def __copy__(self) -> RegisterForPhUpdates: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RegisterForPhUpdates: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RegisterForPhUpdates: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RegisterForPhUpdates, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RegisterForPhUpdates: ...

class RespondToPhUpdates:
    puzzle_hashes: List[bytes32]
    min_height: uint32
    coin_states: List[CoinState]
    def __init__(
        self,
        puzzle_hashes: List[bytes32],
        min_height: uint32,
        coin_states: List[CoinState],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondToPhUpdates: ...
    def __copy__(self) -> RespondToPhUpdates: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondToPhUpdates: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondToPhUpdates: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondToPhUpdates, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondToPhUpdates: ...

class RegisterForCoinUpdates:
    coin_ids: List[bytes32]
    min_height: uint32
    def __init__(self, coin_ids: List[bytes32], min_height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RegisterForCoinUpdates: ...
    def __copy__(self) -> RegisterForCoinUpdates: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RegisterForCoinUpdates: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RegisterForCoinUpdates: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RegisterForCoinUpdates, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RegisterForCoinUpdates: ...

class RespondToCoinUpdates:
    coin_ids: List[bytes32]
    min_height: uint32
    coin_states: List[CoinState]
    def __init__(
        self,
        coin_ids: List[bytes32],
        min_height: uint32,
        coin_states: List[CoinState],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondToCoinUpdates: ...
    def __copy__(self) -> RespondToCoinUpdates: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondToCoinUpdates: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondToCoinUpdates: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondToCoinUpdates, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondToCoinUpdates: ...

class CoinStateUpdate:
    height: uint32
    fork_height: uint32
    peak_hash: bytes32
    items: List[CoinState]
    def __init__(
        self,
        height: uint32,
        fork_height: uint32,
        peak_hash: bytes32,
        items: List[CoinState],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> CoinStateUpdate: ...
    def __copy__(self) -> CoinStateUpdate: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> CoinStateUpdate: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> CoinStateUpdate: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[CoinStateUpdate, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> CoinStateUpdate: ...

class RequestChildren:
    coin_name: bytes32
    def __init__(self, coin_name: bytes32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestChildren: ...
    def __copy__(self) -> RequestChildren: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestChildren: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestChildren: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestChildren, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestChildren: ...

class RespondChildren:
    coin_states: List[CoinState]
    def __init__(self, coin_states: List[CoinState]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondChildren: ...
    def __copy__(self) -> RespondChildren: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondChildren: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondChildren: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondChildren, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondChildren: ...

class RequestSesInfo:
    start_height: uint32
    end_height: uint32
    def __init__(self, start_height: uint32, end_height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestSesInfo: ...
    def __copy__(self) -> RequestSesInfo: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestSesInfo: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestSesInfo: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestSesInfo, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestSesInfo: ...

class RespondSesInfo:
    reward_chain_hash: List[bytes32]
    heights: List[List[uint32]]
    def __init__(self, reward_chain_hash: List[bytes32], heights: List[List[uint32]]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondSesInfo: ...
    def __copy__(self) -> RespondSesInfo: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondSesInfo: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondSesInfo: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondSesInfo, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondSesInfo: ...

class RequestFeeEstimates:
    time_targets: List[uint64]
    def __init__(self, time_targets: List[uint64]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestFeeEstimates: ...
    def __copy__(self) -> RequestFeeEstimates: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestFeeEstimates: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestFeeEstimates: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestFeeEstimates, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestFeeEstimates: ...

class RespondFeeEstimates:
    estimates: FeeEstimateGroup
    def __init__(self, estimates: FeeEstimateGroup) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondFeeEstimates: ...
    def __copy__(self) -> RespondFeeEstimates: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondFeeEstimates: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondFeeEstimates: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondFeeEstimates, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondFeeEstimates: ...

class FeeEstimateGroup:
    error: Optional[str]
    estimates: List[FeeEstimate]
    def __init__(self, error: Optional[str], estimates: List[FeeEstimate]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> FeeEstimateGroup: ...
    def __copy__(self) -> FeeEstimateGroup: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> FeeEstimateGroup: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> FeeEstimateGroup: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[FeeEstimateGroup, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> FeeEstimateGroup: ...

class FeeEstimate:
    error: Optional[str]
    time_target: uint64
    estimated_fee_rate: FeeRate
    def __init__(
        self,
        error: Optional[str],
        time_target: uint64,
        estimated_fee_rate: FeeRate,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> FeeEstimate: ...
    def __copy__(self) -> FeeEstimate: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> FeeEstimate: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> FeeEstimate: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[FeeEstimate, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> FeeEstimate: ...

class FeeRate:
    mojos_per_clvm_cost: uint64
    def __init__(self, mojos_per_clvm_cost: uint64) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> FeeRate: ...
    def __copy__(self) -> FeeRate: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> FeeRate: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> FeeRate: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[FeeRate, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> FeeRate: ...

class RequestRemovePuzzleSubscriptions:
    puzzle_hashes: Optional[List[bytes32]]
    def __init__(self, puzzle_hashes: Optional[List[bytes32]]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestRemovePuzzleSubscriptions: ...
    def __copy__(self) -> RequestRemovePuzzleSubscriptions: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestRemovePuzzleSubscriptions: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestRemovePuzzleSubscriptions: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestRemovePuzzleSubscriptions, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestRemovePuzzleSubscriptions: ...

class RespondRemovePuzzleSubscriptions:
    puzzle_hashes: List[bytes32]
    def __init__(self, puzzle_hashes: List[bytes32]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondRemovePuzzleSubscriptions: ...
    def __copy__(self) -> RespondRemovePuzzleSubscriptions: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondRemovePuzzleSubscriptions: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondRemovePuzzleSubscriptions: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondRemovePuzzleSubscriptions, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondRemovePuzzleSubscriptions: ...

class RequestRemoveCoinSubscriptions:
    coin_ids: Optional[List[bytes32]]
    def __init__(self, coin_ids: Optional[List[bytes32]]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestRemoveCoinSubscriptions: ...
    def __copy__(self) -> RequestRemoveCoinSubscriptions: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestRemoveCoinSubscriptions: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestRemoveCoinSubscriptions: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestRemoveCoinSubscriptions, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestRemoveCoinSubscriptions: ...

class RespondRemoveCoinSubscriptions:
    coin_ids: List[bytes32]
    def __init__(self, coin_ids: List[bytes32]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondRemoveCoinSubscriptions: ...
    def __copy__(self) -> RespondRemoveCoinSubscriptions: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondRemoveCoinSubscriptions: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondRemoveCoinSubscriptions: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondRemoveCoinSubscriptions, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondRemoveCoinSubscriptions: ...

class CoinStateFilters:
    include_spent: bool
    include_unspent: bool
    include_hinted: bool
    min_amount: uint64
    def __init__(
        self,
        include_spent: bool,
        include_unspent: bool,
        include_hinted: bool,
        min_amount: uint64,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> CoinStateFilters: ...
    def __copy__(self) -> CoinStateFilters: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> CoinStateFilters: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> CoinStateFilters: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[CoinStateFilters, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> CoinStateFilters: ...

class RequestPuzzleState:
    puzzle_hashes: List[bytes32]
    previous_height: Optional[uint32]
    header_hash: bytes32
    filters: CoinStateFilters
    subscribe_when_finished: bool
    def __init__(
        self,
        puzzle_hashes: List[bytes32],
        previous_height: Optional[uint32],
        header_hash: bytes32,
        filters: CoinStateFilters,
        subscribe_when_finished: bool,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestPuzzleState: ...
    def __copy__(self) -> RequestPuzzleState: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestPuzzleState: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestPuzzleState: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestPuzzleState, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestPuzzleState: ...

class RespondPuzzleState:
    puzzle_hashes: List[bytes32]
    height: uint32
    header_hash: bytes32
    is_finished: bool
    coin_states: List[CoinState]
    def __init__(
        self,
        puzzle_hashes: List[bytes32],
        height: uint32,
        header_hash: bytes32,
        is_finished: bool,
        coin_states: List[CoinState],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondPuzzleState: ...
    def __copy__(self) -> RespondPuzzleState: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondPuzzleState: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondPuzzleState: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondPuzzleState, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondPuzzleState: ...

class RejectPuzzleState:
    reason: int
    def __init__(self, reason: int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RejectPuzzleState: ...
    def __copy__(self) -> RejectPuzzleState: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RejectPuzzleState: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RejectPuzzleState: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RejectPuzzleState, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RejectPuzzleState: ...

class RequestCoinState:
    coin_ids: List[bytes32]
    previous_height: Optional[uint32]
    header_hash: bytes32
    subscribe: bool
    def __init__(
        self,
        coin_ids: List[bytes32],
        previous_height: Optional[uint32],
        header_hash: bytes32,
        subscribe: bool,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestCoinState: ...
    def __copy__(self) -> RequestCoinState: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestCoinState: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestCoinState: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestCoinState, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestCoinState: ...

class RespondCoinState:
    coin_ids: List[bytes32]
    coin_states: List[CoinState]
    def __init__(self, coin_ids: List[bytes32], coin_states: List[CoinState]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondCoinState: ...
    def __copy__(self) -> RespondCoinState: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondCoinState: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondCoinState: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondCoinState, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondCoinState: ...

class RejectCoinState:
    reason: int
    def __init__(self, reason: int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RejectCoinState: ...
    def __copy__(self) -> RejectCoinState: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RejectCoinState: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RejectCoinState: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RejectCoinState, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RejectCoinState: ...

class NewPeak:
    header_hash: bytes32
    height: uint32
    weight: uint128
    fork_point_with_previous_peak: uint32
    unfinished_reward_block_hash: bytes32
    def __init__(
        self,
        header_hash: bytes32,
        height: uint32,
        weight: uint128,
        fork_point_with_previous_peak: uint32,
        unfinished_reward_block_hash: bytes32,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> NewPeak: ...
    def __copy__(self) -> NewPeak: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> NewPeak: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> NewPeak: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[NewPeak, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> NewPeak: ...

class NewTransaction:
    transaction_id: bytes32
    cost: uint64
    fees: uint64
    def __init__(
        self,
        transaction_id: bytes32,
        cost: uint64,
        fees: uint64,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> NewTransaction: ...
    def __copy__(self) -> NewTransaction: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> NewTransaction: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> NewTransaction: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[NewTransaction, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> NewTransaction: ...

class RequestTransaction:
    transaction_id: bytes32
    def __init__(self, transaction_id: bytes32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestTransaction: ...
    def __copy__(self) -> RequestTransaction: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestTransaction: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestTransaction: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestTransaction, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestTransaction: ...

class RespondTransaction:
    transaction: SpendBundle
    def __init__(self, transaction: SpendBundle) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondTransaction: ...
    def __copy__(self) -> RespondTransaction: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondTransaction: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondTransaction: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondTransaction, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondTransaction: ...

class RequestProofOfWeight:
    total_number_of_blocks: uint32
    tip: bytes32
    def __init__(self, total_number_of_blocks: uint32, tip: bytes32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestProofOfWeight: ...
    def __copy__(self) -> RequestProofOfWeight: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestProofOfWeight: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestProofOfWeight: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestProofOfWeight, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestProofOfWeight: ...

class RespondProofOfWeight:
    wp: WeightProof
    tip: bytes32
    def __init__(self, wp: WeightProof, tip: bytes32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondProofOfWeight: ...
    def __copy__(self) -> RespondProofOfWeight: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondProofOfWeight: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondProofOfWeight: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondProofOfWeight, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondProofOfWeight: ...

class RequestBlock:
    height: uint32
    include_transaction_block: bool
    def __init__(self, height: uint32, include_transaction_block: bool) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestBlock: ...
    def __copy__(self) -> RequestBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestBlock: ...

class RejectBlock:
    height: uint32
    def __init__(self, height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RejectBlock: ...
    def __copy__(self) -> RejectBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RejectBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RejectBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RejectBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RejectBlock: ...

class RequestBlocks:
    start_height: uint32
    end_height: uint32
    include_transaction_block: bool
    def __init__(
        self,
        start_height: uint32,
        end_height: uint32,
        include_transaction_block: bool,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestBlocks: ...
    def __copy__(self) -> RequestBlocks: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestBlocks: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestBlocks: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestBlocks, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestBlocks: ...

class RespondBlocks:
    start_height: uint32
    end_height: uint32
    blocks: List[FullBlock]
    def __init__(
        self,
        start_height: uint32,
        end_height: uint32,
        blocks: List[FullBlock],
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondBlocks: ...
    def __copy__(self) -> RespondBlocks: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondBlocks: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondBlocks: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondBlocks, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondBlocks: ...

class RejectBlocks:
    start_height: uint32
    end_height: uint32
    def __init__(self, start_height: uint32, end_height: uint32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RejectBlocks: ...
    def __copy__(self) -> RejectBlocks: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RejectBlocks: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RejectBlocks: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RejectBlocks, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RejectBlocks: ...

class RespondBlock:
    block: FullBlock
    def __init__(self, block: FullBlock) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondBlock: ...
    def __copy__(self) -> RespondBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondBlock: ...

class NewUnfinishedBlock:
    unfinished_reward_hash: bytes32
    def __init__(self, unfinished_reward_hash: bytes32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> NewUnfinishedBlock: ...
    def __copy__(self) -> NewUnfinishedBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> NewUnfinishedBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> NewUnfinishedBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[NewUnfinishedBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> NewUnfinishedBlock: ...

class RequestUnfinishedBlock:
    unfinished_reward_hash: bytes32
    def __init__(self, unfinished_reward_hash: bytes32) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestUnfinishedBlock: ...
    def __copy__(self) -> RequestUnfinishedBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestUnfinishedBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestUnfinishedBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestUnfinishedBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestUnfinishedBlock: ...

class RespondUnfinishedBlock:
    unfinished_block: UnfinishedBlock
    def __init__(self, unfinished_block: UnfinishedBlock) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondUnfinishedBlock: ...
    def __copy__(self) -> RespondUnfinishedBlock: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondUnfinishedBlock: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondUnfinishedBlock: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondUnfinishedBlock, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondUnfinishedBlock: ...

class NewSignagePointOrEndOfSubSlot:
    prev_challenge_hash: Optional[bytes32]
    challenge_hash: bytes32
    index_from_challenge: uint8
    last_rc_infusion: bytes32
    def __init__(
        self,
        prev_challenge_hash: Optional[bytes32],
        challenge_hash: bytes32,
        index_from_challenge: uint8,
        last_rc_infusion: bytes32,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> NewSignagePointOrEndOfSubSlot: ...
    def __copy__(self) -> NewSignagePointOrEndOfSubSlot: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> NewSignagePointOrEndOfSubSlot: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> NewSignagePointOrEndOfSubSlot: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[NewSignagePointOrEndOfSubSlot, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> NewSignagePointOrEndOfSubSlot: ...

class RequestSignagePointOrEndOfSubSlot:
    challenge_hash: bytes32
    index_from_challenge: uint8
    last_rc_infusion: bytes32
    def __init__(
        self,
        challenge_hash: bytes32,
        index_from_challenge: uint8,
        last_rc_infusion: bytes32,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestSignagePointOrEndOfSubSlot: ...
    def __copy__(self) -> RequestSignagePointOrEndOfSubSlot: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestSignagePointOrEndOfSubSlot: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestSignagePointOrEndOfSubSlot: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestSignagePointOrEndOfSubSlot, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestSignagePointOrEndOfSubSlot: ...

class RespondSignagePoint:
    index_from_challenge: uint8
    challenge_chain_vdf: VDFInfo
    challenge_chain_proof: VDFProof
    reward_chain_vdf: VDFInfo
    reward_chain_proof: VDFProof
    def __init__(
        self,
        index_from_challenge: uint8,
        challenge_chain_vdf: VDFInfo,
        challenge_chain_proof: VDFProof,
        reward_chain_vdf: VDFInfo,
        reward_chain_proof: VDFProof,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondSignagePoint: ...
    def __copy__(self) -> RespondSignagePoint: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondSignagePoint: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondSignagePoint: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondSignagePoint, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondSignagePoint: ...

class RespondEndOfSubSlot:
    end_of_slot_bundle: EndOfSubSlotBundle
    def __init__(self, end_of_slot_bundle: EndOfSubSlotBundle) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondEndOfSubSlot: ...
    def __copy__(self) -> RespondEndOfSubSlot: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondEndOfSubSlot: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondEndOfSubSlot: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondEndOfSubSlot, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondEndOfSubSlot: ...

class RequestMempoolTransactions:
    filter: bytes
    def __init__(self, filter: bytes) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestMempoolTransactions: ...
    def __copy__(self) -> RequestMempoolTransactions: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestMempoolTransactions: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestMempoolTransactions: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestMempoolTransactions, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestMempoolTransactions: ...

class NewCompactVDF:
    height: uint32
    header_hash: bytes32
    field_vdf: uint8
    vdf_info: VDFInfo
    def __init__(
        self,
        height: uint32,
        header_hash: bytes32,
        field_vdf: uint8,
        vdf_info: VDFInfo,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> NewCompactVDF: ...
    def __copy__(self) -> NewCompactVDF: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> NewCompactVDF: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> NewCompactVDF: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[NewCompactVDF, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> NewCompactVDF: ...

class RequestCompactVDF:
    height: uint32
    header_hash: bytes32
    field_vdf: uint8
    vdf_info: VDFInfo
    def __init__(
        self,
        height: uint32,
        header_hash: bytes32,
        field_vdf: uint8,
        vdf_info: VDFInfo,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestCompactVDF: ...
    def __copy__(self) -> RequestCompactVDF: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestCompactVDF: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestCompactVDF: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestCompactVDF, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestCompactVDF: ...

class RespondCompactVDF:
    height: uint32
    header_hash: bytes32
    field_vdf: uint8
    vdf_info: VDFInfo
    vdf_proof: VDFProof
    def __init__(
        self,
        height: uint32,
        header_hash: bytes32,
        field_vdf: uint8,
        vdf_info: VDFInfo,
        vdf_proof: VDFProof,
    ) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondCompactVDF: ...
    def __copy__(self) -> RespondCompactVDF: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondCompactVDF: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondCompactVDF: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondCompactVDF, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondCompactVDF: ...

class RequestPeers:
    def __init__(self) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestPeers: ...
    def __copy__(self) -> RequestPeers: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestPeers: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestPeers: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestPeers, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestPeers: ...

class RespondPeers:
    peer_list: List[TimestampedPeerInfo]
    def __init__(self, peer_list: List[TimestampedPeerInfo]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RespondPeers: ...
    def __copy__(self) -> RespondPeers: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RespondPeers: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RespondPeers: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RespondPeers, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RespondPeers: ...

class NewUnfinishedBlock2:
    unfinished_reward_hash: bytes32
    foliage_hash: Optional[bytes32]
    def __init__(self, unfinished_reward_hash: bytes32, foliage_hash: Optional[bytes32]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> NewUnfinishedBlock2: ...
    def __copy__(self) -> NewUnfinishedBlock2: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> NewUnfinishedBlock2: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> NewUnfinishedBlock2: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[NewUnfinishedBlock2, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> NewUnfinishedBlock2: ...

class RequestUnfinishedBlock2:
    unfinished_reward_hash: bytes32
    foliage_hash: Optional[bytes32]
    def __init__(self, unfinished_reward_hash: bytes32, foliage_hash: Optional[bytes32]) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> RequestUnfinishedBlock2: ...
    def __copy__(self) -> RequestUnfinishedBlock2: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> RequestUnfinishedBlock2: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> RequestUnfinishedBlock2: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[RequestUnfinishedBlock2, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> RequestUnfinishedBlock2: ...

class AugSchemeMPL:
    @staticmethod
    def sign(sk: PrivateKey, msg: bytes, prepend_pk: Optional[G1Element] = None) -> G2Element: ...
    @staticmethod
    def aggregate(sigs: List[G2Element]) -> G2Element: ...
    @staticmethod
    def verify(pk: G1Element, msg: bytes, sig: G2Element) -> bool: ...
    @staticmethod
    def aggregate_verify(pks: List[G1Element], msgs: List[bytes], sig: G2Element) -> bool: ...
    @staticmethod
    def key_gen(seed: bytes) -> PrivateKey: ...
    @staticmethod
    def g2_from_message(msg: bytes) -> G2Element: ...
    @staticmethod
    def derive_child_sk(sk: PrivateKey, index: int) -> PrivateKey: ...
    @staticmethod
    def derive_child_sk_unhardened(sk: PrivateKey, index: int) -> PrivateKey: ...
    @staticmethod
    def derive_child_pk_unhardened(pk: G1Element, index: int) -> G1Element: ...

class PrivateKey:
    PRIVATE_KEY_SIZE: ClassVar[int] = ...
    def sign_g2(self, msg: bytes, dst: bytes) -> G2Element: ...
    def get_g1(self) -> G1Element: ...
    def __str__(self) -> str: ...
    def __init__(self) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __richcmp__(self) -> Any: ...
    def __deepcopy__(self) -> PrivateKey: ...
    def __copy__(self) -> PrivateKey: ...
    @staticmethod
    def from_bytes(buffer: bytes) -> PrivateKey: ...
    @staticmethod
    def from_bytes_unchecked(buffer: bytes) -> PrivateKey: ...
    @staticmethod
    def parse_rust(buffer: ReadableBuffer, trusted: bool = False) -> Tuple[PrivateKey, int]: ...
    def to_bytes(self) -> bytes: ...
    def __bytes__(self) -> bytes: ...
    def stream_to_bytes(self) -> bytes: ...
    def get_hash(self) -> bytes32: ...
    def to_json_dict(self) -> Any: ...
    @staticmethod
    def from_json_dict(json_dict: Any) -> PrivateKey: ...

class BLSCache:
    def __init__(self, cache_size: Optional[int] = 50000) -> None: ...
    def len(self) -> int: ...
    def aggregate_verify(
        self,
        pks: List[G1Element],
        msgs: List[bytes],
        sig: G2Element,
    ) -> bool: ...
    def items(self) -> List[Tuple[bytes, bytes]]: ...
    def update(self, other: List[Tuple[bytes, bytes]]) -> None: ...